[tool.mypy]
strict = true
namespace_packages = true
show_column_numbers = true
show_error_context = true

[tool.ruff]
src = ["src", "tests"]
# It's OK to be in preview; this is a project in alpha anyway.
preview = true
select = [
    # List based on all linter rules (prefixes) in version 0.0.290 (`ruff linter`).
    # Explicit selection is encouraged as per Ruff documentation, opposed to implicit
    # ["ALL"].

    "F",     # Pyflakes
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "AIR",   # Airflow
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules

    # Copyright notices are enforced using 'reuse' for this project.
    # "CPY",   # Copyright-related rules

    # No documentation here.
    # "D",     # pydocstyle

    # Disabled for having too many false positives claiming comments are 'dead code'.
    # https://github.com/astral-sh/ruff/issues/4845
    # "ERA",   # eradicate

    # Pandas ruleset are trigger happy with false positives and Ruff doesn't have the
    # conscience of actually using Pandas in the context.
    # E.g. "Use `.to_numpy()` instead of `.values`"
    # https://github.com/astral-sh/ruff/issues/6630
    # "PD",    # pandas-vet
]
ignore = [
    # "Missing type annotation for `self` in method"
    # "Missing type annotation for `cls` in classmethod"
    # ... do not make any sense to me. ðŸ¤¨
    "ANN101",
    "ANN102",

    # Conflicts with Black in style of commas used on a single line.
    # https://github.com/astral-sh/ruff/issues/6525
    "COM812",

    # Not really to ignore a rule, but to assign the preference of docstring formats.
    #
    # > Note that some pydocstyle rules conflict (e.g., D203 and D211) as they represent
    # > alternative docstring formats.
    # (https://beta.ruff.rs/docs/configuration/#using-pyprojecttoml)
    #
    # - warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class`
    #   (D211) are incompatible. Ignoring `one-blank-line-before-class`.
    # - warning: `multi-line-summary-first-line` (D212) and
    #   `multi-line-summary-second-line` (D213) are incompatible. Ignoring
    #   `multi-line-summary-second-line`.
    "D203",
    "D212",

    # Style conflicts with Black.
    # https://github.com/astral-sh/ruff/issues/7259
    "E203",

    # "Line contains TODO"
    "FIX002",

    # "Method `...` could be a function or static method"
    # Just example code here; not very realistic to add unused code to justify an
    # instance method or to make it an uncommon form of static/classmethod.
    "PLR6301",

    # "Use of assert detected" https://stackoverflow.com/a/68429294/1254292
    "S101",

    # "`print` found"
    # Yeah we print stuff...
    "T201",

    # "Missing author in TODO; try: `# TODO(<author_name>): ...`"
    "TD002",
    # "Missing issue link on the line following this TODO"
    "TD003",
]

[tool.ruff.isort]
required-imports = [
    # PEP-563 (new semantics for annotations) is gated behind
    # 'from __future__ import annotations', including Python 3.10 & 3.11.
    # https://docs.python.org/3/library/__future__.html#id1
    "from __future__ import annotations",
]
